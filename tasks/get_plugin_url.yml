---
- name: Look for a plugin checksum cache file
  stat:
    path: >-
      {{ __vim_configdir + '/pack/' +
           ansible_role_name + '/start/' + dest + '/.checksum' }}
  register: checksum_cache
  when:
    - "__vim_configdir is not none"

- name: Load stored checksum
  slurp:
    path: >-
      {{ __vim_configdir + '/pack/' +
           ansible_role_name + '/start/' + dest + '/.checksum' }}
  register: checksum_slurp
  when:
    - "__vim_configdir is not none"
    - "checksum_cache.stat.exists"

- block:
    - name: Create tmpfile for vim plugin
      tempfile:
        state: directory
      register: tmpdir
      when:
        - "__vim_configdir is not none"
        - >-
          (checksum is none) or
          (not checksum_cache.stat.exists) or
          (
            checksum_cache.stat.exists and
            ((checksum_slurp.content | b64decode) != checksum)
          )

    - name: Git fetch remote plugins over HTTP
      get_url:
        url: "{{ src }}"
        checksum: "{{ checksum }}"
        dest: "{{ tmpdir.path }}/{{ src | basename }}"
      when:
        - "tmpdir is defined"
        - "'path' in tmpdir"

    - name: Create the destdir
      file:
        path: "{{ tmpdir.path }}/dest"
        state: directory
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: "{{ mode | default('0750') }}"
      when:
        - "tmpdir is defined"
        - "'path' in tmpdir"

    - name: Extract package
      unarchive:
        src: "{{ tmpdir.path }}/{{ src | basename }}"
        dest: "{{ tmpdir.path }}/dest"
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: "{{ mode | default('0750') }}"
        remote_src: true
      when:
        - "tmpdir is defined"
        - "'path' in tmpdir"

    - name: List files under tmpdir/dest
      find:
        paths: "{{ tmpdir.path }}/dest/"
        file_type: directory
      register: extracted_paths
      when:
        - "tmpdir is defined"
        - "'path' in tmpdir"

    - name: Look for vim pack dir
      stat:
        path: "{{ __vim_configdir + '/pack/' + ansible_role_name + '/start' }}"
      register: packdir
      when:
        - "tmpdir is defined"
        - "'path' in tmpdir"

    - name: Create the pack dir, only if it doesn't already exist
      file:
        path: >-
          {{ __vim_configdir + '/pack/' + ansible_role_name + '/start' }}
        state: directory
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: "0755"
      when:
        - "tmpdir is defined"
        - "'path' in tmpdir"
        - "not packdir.stat.exists"

    - name: Use command to synchronize extracted archive path into .vim path # noqa 303
      command: >-
        rsync -rvz --delete "{{ extracted_paths.files[0].path + '/' }}"
          "{{ __vim_configdir + '/pack/' + ansible_role_name +
                '/start/' + dest + '/' }}"
      when:
        - "extracted_paths is defined"
        - "'files' in extracted_paths"
        - "extracted_paths.files|length == 1"

    - name: Update ownership on copied files
      file:
        path: >-
          {{ __vim_configdir + '/pack/'
              + ansible_role_name + '/start/' + dest }}
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: "{{ mode | default('+rX,u+w,go-w') }}"
        recurse: "{{ recurse_perm | default(true) }}"
    - name: Cache the checksum if one is set
      copy:
        content: "{{ checksum }}"
        dest: >-
          {{ __vim_configdir + '/pack/' +
               ansible_role_name + '/start/' + dest + '/.checksum' }}
        owner: "{{ owner }}"
        group: "{{ group }}"
        mode: "{{ mode | default('0600') }}"
      when:
        - "extracted_paths is defined"
        - "'files' in extracted_paths"
        - "extracted_paths.files|length == 1"
        - "checksum is defined"
        - "checksum is not none"
        - "__vim_configdir is not none"
  always:
    - name: Remove tmpdir
      file:
        path: "{{ tmpdir.path }}"
        state: absent
      when:
        - "tmpdir is defined"
        - "'path' in tmpdir"
